I apologize for any confusion. As of my knowledge cutoff in September 2021, Neo4j does not natively support adding computational capabilities directly to individual nodes or edges. However, you can achieve real-time money laundering detection by combining Neo4j with external computational frameworks and integrating the results back into the graph.

Here's a high-level approach to implementing compute capabilities for money laundering detection:

1. Real-time Data Integration: Set up a real-time data pipeline to feed incoming transaction data into Neo4j. You can use tools like Apache Kafka or Apache Spark Streaming to ingest and process data continuously.

2. External Computational Framework: Utilize a computational framework, such as Apache Spark or TensorFlow, to perform advanced analytics and machine learning algorithms on the transaction data. These frameworks support large-scale parallel processing and are capable of handling big data.

3. Data Enrichment: Use the external computational framework to enrich the transaction data with features or derived attributes that are relevant for money laundering detection. This can include features like transaction frequency, amounts, geographical patterns, and more.

4. Money Laundering Detection Algorithms: Implement money laundering detection algorithms within the external computational framework. For example, you can develop machine learning models to identify suspicious transaction patterns based on historical data.

5. Real-time Alerts: Based on the output of the external computational framework, generate real-time alerts for suspicious activities. You can integrate these alerts back into Neo4j by creating alert nodes and relationships.

6. Batch Update: Periodically update the graph database with the results of the computation performed externally. For example, you can perform daily or hourly batch updates to keep the graph up to date with the latest detection results.

7. Visualization: Use Neo4j's visualization capabilities to explore and interpret the graph, including the detected alerts and patterns.

Keep in mind that this is a complex integration, and the choice of external computational frameworks and tools will depend on your specific use case, data volume, and processing requirements. Additionally, advancements or changes in Neo4j beyond my knowledge cutoff date may offer new capabilities that could potentially address this integration more directly. Always refer to the latest Neo4j documentation and resources for up-to-date information.
